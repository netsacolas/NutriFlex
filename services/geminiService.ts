
import { GoogleGenAI, Type } from '@google/genai';
import { MealResult, MealType } from '../types';

const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

if (!API_KEY) {
  console.warn("VITE_GEMINI_API_KEY environment variable not set. Using a placeholder. Please set your API key.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY || 'YOUR_API_KEY_HERE' });

const responseSchema = {
    type: Type.OBJECT,
    properties: {
        totalCalories: { type: Type.NUMBER, description: "Total calculated calories for the meal, should be very close to the target." },
        totalMacros: {
            type: Type.OBJECT,
            properties: {
                protein: { type: Type.NUMBER, description: "Total protein in grams." },
                carbs: { type: Type.NUMBER, description: "Total carbohydrates in grams." },
                fat: { type: Type.NUMBER, description: "Total fat in grams." },
                fiber: { type: Type.NUMBER, description: "Total fiber in grams." },
            },
            required: ["protein", "carbs", "fat", "fiber"],
        },
        glycemicData: {
            type: Type.OBJECT,
            properties: {
                index: { type: Type.NUMBER, description: "Average Glycemic Index of the meal." },
                load: { type: Type.NUMBER, description: "Total Glycemic Load of the meal." },
            },
            required: ["index", "load"],
        },
        portions: {
            type: Type.ARRAY,
            description: "List of each food with its calculated portion size and nutritional info.",
            items: {
                type: Type.OBJECT,
                properties: {
                    foodName: { type: Type.STRING, description: "Name of the food item." },
                    grams: { type: Type.NUMBER, description: "Calculated portion size in grams." },
                    homeMeasure: { type: Type.STRING, description: "A common household measure, e.g., '1 scoop', '2 small filets', '1 cup'." },
                    calories: { type: Type.NUMBER, description: "Calories for this portion." },
                    macros: {
                        type: Type.OBJECT,
                        properties: {
                            protein: { type: Type.NUMBER, description: "Protein in grams for this portion." },
                            carbs: { type: Type.NUMBER, description: "Carbohydrates in grams for this portion." },
                            fat: { type: Type.NUMBER, description: "Fat in grams for this portion." },
                            fiber: { type: Type.NUMBER, description: "Fiber in grams for this portion." },
                        },
                         required: ["protein", "carbs", "fat", "fiber"],
                    },
                    glycemicIndex: { type: Type.NUMBER, description: "Glycemic index of this specific food item." },
                },
                required: ["foodName", "grams", "homeMeasure", "calories", "macros", "glycemicIndex"],
            },
        },
        suggestions: {
            type: Type.ARRAY,
            description: "A few helpful tips or suggestions to improve the meal's nutritional quality.",
            items: { type: Type.STRING },
        },
    },
    required: ["totalCalories", "totalMacros", "glycemicData", "portions", "suggestions"],
};


export const calculateMealPortions = async (
    foods: string[],
    targetCalories: number,
    mealType: MealType
): Promise<MealResult> => {
    try {
        const mealTypeTranslation = {
            breakfast: 'caf√© da manh√£',
            lunch: 'almo√ßo',
            dinner: 'jantar',
            snack: 'lanche'
        };

        // Calcular distribui√ß√£o de macros baseado na meta de calorias
        // 33% prote√≠na (4 kcal/g), 33% gordura (9 kcal/g), 34% carboidrato (4 kcal/g)
        const proteinCalories = Math.round(targetCalories * 0.33);
        const fatCalories = Math.round(targetCalories * 0.33);
        const carbCalories = Math.round(targetCalories * 0.34);

        const proteinGrams = Math.round(proteinCalories / 4);
        const fatGrams = Math.round(fatCalories / 9);
        const carbGrams = Math.round(carbCalories / 4);

        const prompt = `Calcule um plano de refei√ß√£o para ${mealTypeTranslation[mealType]} com uma meta de ${targetCalories} calorias usando os seguintes alimentos: ${foods.join(', ')}.

DISTRIBUI√á√ÉO DE MACRONUTRIENTES OBRIGAT√ìRIA:
- Prote√≠na: ${proteinGrams}g (33% das calorias = ${proteinCalories} kcal)
- Gordura: ${fatGrams}g (33% das calorias = ${fatCalories} kcal)
- Carboidratos: ${carbGrams}g (34% das calorias = ${carbCalories} kcal)

Ajuste as por√ß√µes de cada alimento para atingir EXATAMENTE essa distribui√ß√£o de macronutrientes. Priorize essa distribui√ß√£o acima de tudo.
Forne√ßa quantidades precisas em gramas, medidas caseiras comuns (em portugu√™s brasileiro), e uma an√°lise nutricional completa incluindo:
- Calorias totais
- Macros totais (prote√≠na, carboidratos, gordura, fibras em gramas)
- √çndice glic√™mico m√©dio da refei√ß√£o
- Carga glic√™mica total da refei√ß√£o
- Por√ß√µes detalhadas de cada alimento com suas calorias e macros

IMPORTANTE - SUGEST√ïES PERSONALIZADAS:
Analise os alimentos espec√≠ficos escolhidos pelo usu√°rio (${foods.join(', ')}) e forne√ßa de 3 a 5 sugest√µes PERSONALIZADAS que incluam:
1. Substitui√ß√µes inteligentes para tornar a refei√ß√£o menos cal√≥rica mantendo saciedade (ex: "Substitua o arroz branco por arroz integral ou quinoa para reduzir calorias e aumentar fibras")
2. Combina√ß√µes saud√°veis que potencializam nutrientes (ex: "Adicione lim√£o ao br√≥colis para melhorar a absor√ß√£o de ferro")
3. Op√ß√µes de vegetais ou temperos que podem ser adicionados sem impacto cal√≥rico significativo
4. Alternativas de preparo mais saud√°veis (ex: grelhado ao inv√©s de frito, assar ao inv√©s de fritar)
5. Sugest√µes espec√≠ficas baseadas no tipo de refei√ß√£o (${mealTypeTranslation[mealType]})

As sugest√µes devem ser pr√°ticas, espec√≠ficas para os alimentos escolhidos, e focadas em melhorar qualidade nutricional e reduzir calorias quando poss√≠vel.`;

        console.log("üîç Enviando prompt para Gemini AI...");
        console.log("üìä Calorias alvo:", targetCalories);
        console.log("üçΩÔ∏è Alimentos:", foods);
        console.log("üéØ Distribui√ß√£o macro:", { proteinGrams, fatGrams, carbGrams });

        const response = await ai.models.generateContent({
            model: 'gemini-2.0-flash-exp',
            contents: prompt,
            config: {
                responseMimeType: 'application/json',
                responseSchema: responseSchema,
                systemInstruction: "Voc√™ √© o NutriFlex AI, um nutricionista especialista. Sua tarefa √© calcular os tamanhos precisos das por√ß√µes para uma lista de alimentos espec√≠fica para atingir uma meta de calorias para uma refei√ß√£o. Voc√™ tamb√©m deve fornecer uma an√°lise nutricional COMPLETA E DETALHADA, incluindo macros, fibras, √≠ndice glic√™mico e carga glic√™mica.\n\nREGRA MAIS IMPORTANTE - DISTRIBUI√á√ÉO DE MACRONUTRIENTES:\nA distribui√ß√£o DEVE seguir OBRIGATORIAMENTE: 33% de prote√≠na, 33% de gordura, 34% de carboidratos (em rela√ß√£o √†s calorias totais). Ajuste as por√ß√µes de cada alimento para atingir essa distribui√ß√£o o mais pr√≥ximo poss√≠vel. Esta √© a PRIORIDADE M√ÅXIMA.\n\nAN√ÅLISE NUTRICIONAL COMPLETA (OBRIGAT√ìRIO):\n- Calcule TODAS as calorias totais da refei√ß√£o com precis√£o\n- Calcule TODOS os macros totais (prote√≠na, carboidratos, gordura, fibras) em gramas\n- Forne√ßa o √≠ndice glic√™mico M√âDIO ponderado de todos os alimentos\n- Calcule a carga glic√™mica TOTAL da refei√ß√£o\n- Para CADA alimento, forne√ßa por√ß√£o em gramas, medida caseira, calorias e macros detalhados\n\nSUGEST√ïES PERSONALIZADAS (EXTREMAMENTE IMPORTANTE):\nAs sugest√µes devem ser TOTALMENTE PERSONALIZADAS baseadas nos alimentos ESPEC√çFICOS que o usu√°rio escolheu. N√ÉO forne√ßa dicas gen√©ricas. Analise cada alimento da lista e forne√ßa:\n- Substitui√ß√µes espec√≠ficas para tornar menos cal√≥rico (ex: se tem 'frango frito', sugira 'frango grelhado'; se tem 'arroz branco', sugira 'arroz integral ou couve-flor')\n- Combina√ß√µes inteligentes entre os alimentos escolhidos ou novos ingredientes que potencializam nutrientes\n- Vegetais espec√≠ficos que combinam com os alimentos do prato para aumentar volume com poucas calorias\n- M√©todos de preparo mais saud√°veis aplic√°veis aos alimentos da lista\n- Temperos e ervas que agregam sabor sem calorias\nSeja espec√≠fico, pr√°tico e relevante aos alimentos listados.\n\nOUTRAS REGRAS:\n- Todas as respostas devem ser em PORTUGU√äS BRASILEIRO\n- As medidas caseiras (homeMeasure) devem usar termos brasileiros como 'colher de sopa', 'x√≠cara', 'unidade', 'fil√© pequeno', 'concha', 'escumadeira', 'pires', etc.\n- Seja sempre preciso e √∫til\n- Responda sempre no formato JSON especificado\n- N√ÉO simplifique ou omita nenhuma an√°lise nutricional",
                temperature: 0.7,
                topP: 0.8,
                maxOutputTokens: 2048,
            },
        });

        const jsonText = response.text.trim();
        const result = JSON.parse(jsonText) as MealResult;

        console.log("‚úÖ Resposta recebida da IA");
        console.log("üìà Calorias calculadas:", result.totalCalories);
        console.log("üí™ Macros:", result.totalMacros);
        console.log("üî¢ IG m√©dio:", result.glycemicData.index);
        console.log("üìä CG total:", result.glycemicData.load);
        console.log("üí° Sugest√µes:", result.suggestions.length);

        return result;

    } catch (error) {
        console.error("Error calling Gemini API:", error);
        throw new Error("Failed to calculate meal portions. The AI model might be busy or an error occurred.");
    }
};
